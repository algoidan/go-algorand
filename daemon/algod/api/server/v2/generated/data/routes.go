// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
