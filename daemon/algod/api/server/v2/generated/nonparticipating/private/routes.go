// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/08AAAD///SPif7CvgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
