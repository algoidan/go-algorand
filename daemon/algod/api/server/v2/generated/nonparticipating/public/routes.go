// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
