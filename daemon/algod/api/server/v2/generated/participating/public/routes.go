// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
