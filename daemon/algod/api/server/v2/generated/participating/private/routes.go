// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
