// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4Ka96oc+4aS/JG8taq23il2ktXFybpsbfbes31ZDNkzgxUH4AKgNBOf",
	"//crdAMkSIIz1Efs3ar7ydYQaDQajUajv/BxlqtNpSRIa2anH2cV13wDFjT+xfNc1dJmonB/FWByLSor",
	"lJydhm/MWC3kajafCfdrxe16Np9JvoG2jes/n2n4Ry00FLNTq2uYz0y+hg13gO2ucq0bSNtspTIP4oxA",
	"nL+cfdrzgReFBmOGWP5ZljsmZF7WBTCruTQ8d58MuxZ2zexaGOY7MyGZksDUktl1pzFbCigLcxQm+Y8a",
	"9C6apR98fEqfWhQzrUoY4vlCbRZCQsAKGqSaBWFWsQKW2GjNLXMjOFxDQ6uYAa7zNVsqfQBVQiLGF2S9",
	"mZ2+mxmQBWhcrRzEFf53qQF+g8xyvQI7+zBPTW5pQWdWbBJTO/fU12Dq0hqGbXGOK3EFkrleR+yn2li2",
	"AMYle/P9C/b06dPnbiIbbi0UnslGZ9WOHs+Jus9OZwW3ED4PeY2XK6W5LLKm/ZvvX+D4b/0Ep7bixkB6",
	"s5y5L+z85dgEQscECwlpYYXr0OF+1yOxKdqfF7BUGiauCTW+10WJx/+iq5Jzm68rJaRNrAvDr4w+J2VY",
	"1H2fDGsQ6LSvHKW0A/ruJHv+4ePj+eOTT//27iz7b//n108/TZz+iwbuAQokG+a11iDzXbbSwHG3rLkc",
	"0uON5wezVnVZsDW/wsXnGxT1vi9zfUl0XvGydnwicq3OypUyjHs2KmDJ69KyMDCrZenElIPmuZ0Jwyqt",
	"rkQBxdxJ3+u1yNcs54ZAYDt2LcrS8WBtoBjjtfTs9mymTzFJHF63ogdO6J+XGO28DlACtigNsrxUBjKr",
	"DhxP4cThsmDxgdKeVeZmhxW7WAPDwd0HOmyRdtLxdFnumMV1LRg3jLNwNM2ZWLKdqtk1Lk4pLrG/n42j",
	"2oY5ouHidM5Rt3nHyDcgRoJ4C6VK4BKJF/bdkGRyKVa1BsOu12DX/szTYColDTC1+Dvk1i37/3r755+Z",
	"0uwnMIav4DXPLxnIXBVQHLHzJZPKRqzheQlp6HqOzcPjlTrk/26U44mNWVU8v0yf6KXYiMSsfuJbsak3",
	"TNabBWi3pOEIsYppsLWWYwgRxAOsuOHb4aAXupY5rn87bEeXc9wmTFXyHRJsw7d/PJl7dAzjZckqkIWQ",
	"K2a3clSPc2MfRi/TqpbFBDXHujWNDlZTQS6WAgrWQNmDiR/mED5C3gyfVvmK0AlARtFpRjmAjoRtgmfc",
	"7nZfWMVXELHMEfuLF2741apLkA2js8UOP1UaroSqTdNpBEccer8GLpWFrNKwFAkee+vJ4QQMtfESeON1",
	"oFxJy4WEwglnRFpZIGE1ilM04P77zvAUX3AD3zwbO+PbrxNXf6n6q753xSetNjbKaEsmjk731W/YtGbV",
	"6T/hfhiPbcQqo58HCylWF+60WYoST6K/u/ULZKgNCoEOIcLZZMRKcltrOH0vH7m/WMbeWi4Lrgv3y4Z+",
	"+qkurXgrVu6nkn56pVYifytWI8RscE1euLDbhv5x8NLi2G6T94pXSl3WVTyhvHNxXezY+cuxRSaYN2XM",
	"s+a2G188LrbhMnLTHnbbLOQIkqO0q7hreAk7DQ5bni/xn+0S+Ykv9W/un6oqXW9bLVOkdXzsj2Q0H3iz",
	"wllVlSLnjohv/Gf31QkBoIsEb1sc44F6+jFCsdKqAm0FAeVVlZUq52VmLLcI6d81LGens387bu0vx9Td",
	"HEeDv3K93mInp7KSGpTxqroBjNdO9TF7hIUT0PgJxQSJPVSahKRFdKwknAgu4YpLe9ReWTryoNnA7/xI",
	"Lb1J2yF6965gowRn1HABhjRgavjAsIj0DMnKkKyokK5KtWh++OqsqloK4vezqiJ6oPYIAhUz2ApjzUOc",
	"Pm93UjzO+csj9kMMG1VxJcudOxxI1XBnw9KfWv4Ua2xLfg4txAeG4XIqfeSWJpDBqfn3wXF4rVir0mk9",
	"B3nFNf6Tbxuzmft9Uud/DRaLaTvOXHjR8pSjOw7+El1uvupxzpBxvLnniJ31+96ObRyUNMPcilf2rifB",
	"3UPHhoTXmleEoP9CZ6mQeEmjRoTrHaXpREGXxDnawxGvIVa33msH90MSE2SFHg7fliq//BM363vY84sA",
	"a7j9cBi2Bl6AZmtu1kezlJYRb68W2pQt5hriBZ8toqGOmine1/QOTK3glkdT8/im1RIiPfZDoQc6cXf5",
	"M/6Hl8x9dnvbiX4Ce8QuUIAZ2s7eyVC42z5dEGgk1wCtEIpt6ILP3K37Rli+aAdPr9OkNfqObAp+hfwk",
	"cIXU9t63wbdqm8LhW7UdbAG1BXMf/OHgoBppYWMm4PfSY6Zw/T35uNZ8NyQywp5CZDdBp7oa3A0yPvHd",
	"KK1x9myh9O2kT0+sSNaanBl3UCPhO+8RCZvWVeZZMWG2ogY9QK2Xb7/Q6INPUaxDhbeW/w5UMA7qfVCh",
	"C+i+qaA2lSjhHlh/nRT6C27g6RP29k9nXz9+8uuTr79xLFlptdJ8wxY7C4Z95e9mzNhdCQ+HM8PbUV3a",
	"NPRvngVDZRduCo5Rtc5hw6shKDKAkgpEzZhrN6Ral8w46wbBKZvzApwkJ7Izsu071F4K4zSszeJeFmOM",
	"YEU7SsE8JgUcZKabTq8dZhdPUe90fR9XWdBa6YR9DbeYVbkqsyvQRqiEN+W1b8F8i6DeVv3fCVt2zQ1z",
	"Y6Ppt5aoUCQ4y27ldLlPoC+2sqXNXslP803Mzo87ZV26xA+WRMMq0JndSlbAol51bkJLrTaMswI74hn9",
	"A9i3O5mjVe0+mHT8mrYREk38Zifz6M7mFqqEYtVZhLvfzfpUCfY5GuqBSaDjyPEKP+O1/iWUlt+7/tIf",
	"IIX7i7CQhCwrXEO8Bb8Sq7WNFMzXWqnl/eOYGiWFKH4g9bx0fYZK+s+qADfZ2tzDYdwCa3ndrWnM4Xyh",
	"ass4k6oAtKjUJn1Mj3ju0WWInk4bn/x2TRr3Ahwj5bx2s60rhn68geRoO2Y8J+7NkDRmxIvRuJ+oFQ1H",
	"XuFSAy/crR4kUwvvKvBODJwkRyekDQedVxISe6mDV6VVDsZAkXkTxUHUQjsSInYPnRBxRLgZhRnFllzf",
	"GdnLq4N4XsIuQ5e5YV/9+It5+AXwtcry8gBhsU2KvM2Fz/uDhlhPG34fw/UHj9mOa2BB5rrbpRMQJVgY",
	"I+GNaDK6fn2MBqt4d7JcgUbPzO/K8WGQuzFQg+rvzO93xbauRgLB/EXnQmzQbie5VAZyJQuTBFZyY7ND",
	"Ytk16tzG3AwiSZiSxAh4RCl5xY0lb6KQBRpB6DjBcUhBcUOMI4wG+8qdgWNDIKi2GQv+zxGAoxquQ/WX",
	"oNwOkc3dwSpNbRpN19RVpbSFIkUUCds9Y/0M22YstYxgN+q0Vaw2cAjyGE0i+J76NBOiOLeNFd/774eT",
	"Q1u3Uxx2SVJ2kGgJsQ+Rt6FVRN04umYEEWFaQhMnCtNjxSakZz4zVlWVEz82q2XTb4xMb6n1mf1L23bI",
	"rdy2ikChwGBQj2/vMb8mylJc1Zq7OzlCZht+6ZQZvGGTH3WIs9vdmREyh2zfVnL7/K1rFe+pg7u+rlaa",
	"F5AVUPLdEOhf6DOjz/sA4Iq3NyllIaMAmfSit5w8vh8b0ArhmZQ2yvALy90WdFeZlkF87wOQC0DYKWnn",
	"+ehBAwrHSi5RgIfTpqVOQMTj9UpZt+LEDoixPyGm4DtChgby7SmBnbP2ntcf4r/A+AEaveTmg+zAjE2h",
	"hX+jCYxY53zocbRdxo6LntTvCeakNB2VbgfEy9hOHjEhvubailxUeKf6EXb3fsXsD5B0bLECLBclFCz6",
	"QNfNKu7PKOKjD/N2V85J1p4h+gNzT2I6pTCoWnWRv4Qd3u1fUyjhRRSAeA935gRUd2xxyRDREKDkVP24",
	"CWx5bsudUwjtGnbsGjQwUy82wloKEe5eqa2qshhA0pK+Z0TvNqIwvLACU/xYbxFUNL3hUsxndPfYj99F",
	"7wLSIYe/c1RKlROsVANiJDGYFGHAKuVWXfho5RCvGjipg6QX5ugzbLSCB6ZDZpwB+y9Vs5xLvNrVFhpV",
	"R2nUH1CvdCM4zawZ08cStBSCEjZAN1b88uhRf+KPHvk1F4Yt4TqE+LuGfXI8eoT2otfK2M7mugebpNtu",
	"54ljBV0MeB76KImeTDnsy/aQp6zk6x7wxi/h9pQxnnHd9O8sAHo7cztl7jGPTPPjI9xJ3oMIdGreuO5v",
	"xaYuub0PP8lePbW5Z4jNBgrBLZQ7VmnIgcK4neJlCBeHGqMAr3zN5Qr1ba3qlY8wIjgoGGtDphJdywGI",
	"pFJitzJbaVVXKUHpo0pDJL9TR4C7G1FESOxM+v81b8bzyRtTTrBA8Gh1fnAwx9wX89nohdER9aq9MBJx",
	"uukIaSpgfkVm6jwHSMYap65izVR7aZdtIo0H6NSGWlOwFeO5rXkZcx07XzIud918TC5K46SgMAzbuc5t",
	"AO+c5haSZZa8JCdwInsj3ikdTTBa+ZakfVJMdHAgkzhtaMgZMQO67eXY+PdxFrSgU1gOB46iu9qPYwFe",
	"7l5e7u5BDSJATEOlweChFRvIDH1VyzjJyp9qZmcsbIY+BOr664igeTN6sVSyFBKyjZKwS+YVCwk/4cek",
	"4MCDc6QzqjBjffu3lQ7+PbS640zhxrvSF1c7kkWvm8jGe1j8Ptye+yhOL0PzKJQV4ywvBRpPlTRW17l9",
	"LzlaU6LNlogACffGcfvai9AkbdBL2Ns8qPeSY/RPY2NJeq2XkDAofA8QzGymXq3A9OQnWwK8l76VkKyW",
	"wuJYG7deGS1YBRrDMI6o5YbvnAhEc+BvoBVb1LYrkzHFxVgnLsmX5YZhavlecstKcHftn4S82CK44AsO",
	"PCPBXit92VAhfYSsQIIRJktHqvxAXzGI0E9/7QMKMSWZPpP3w8Fv82B2aGxp02z/z1f/efruLPtvnv12",
	"kj3/H8cfPj779PDR4Mcnn/74x//b/enppz8+/M9/T61UwD2VgOExP3/pL2vnL1Ejb90fA9w/m+l7I2SW",
	"ZLLYyd/jLfYVJht6BnrYtePYNbyXdisdI13xUhRO5boNO/RF3GAv0u7ocU1nIXp2mzDXG+q5d5AyLCFk",
	"eqLx1sf4MLgrneqE/jifvYT7ZVlLWsqg6FIkfwiyUct5k85GlS5OGeY6rXmIEPN/Pvn6m9m8zVFqvs/m",
	"M//1Q4KTRbFNaoewTV1f/AbBjfHAsIrvDIwooIh7Mp6IwhpisBtw916zFtXnlxTGikVawoX4aG8G2cpz",
	"SYHLbv+gd2/nbfxq+fnxttrp4ZVdpzLgO5oCtmpXE6AXcVFpdQVyzsQRHPXNEIW7mvnIphL4EjOx8aKn",
	"puR7NPuAGC1wRUT1eCKT7vop/kHl1kvrT/OZP/zNvevjHnAKr/6Yject/G0Ve/DDdxfs2AtM84CSIgl0",
	"lMaWuLX6TI1OLI6TZlT3g7JC38v38iUshRTu++l7WXDLjxfciNwc1wb0t7zkMoejlWKnIfnjJbf8vRxo",
	"WqOleaK0G1bVi1Lk7DLWiFv2pHILQwjv37/j5Uq9f/9hEJYw1F/9UEn5QgNk18KuVW0znyyeabjmOuWl",
	"MU2yMEKmahD7Rp0zD5tEsU9G9/DTMo9XleknDQ6nX1Wlm37EhsanxLklY8YqHXQRp6AQNri+Pyt/MGh+",
	"HUwYtQHD/rbh1Tsh7QeWva9PTp4C62TR/c0f+Y4ndxVMNmSMJjX27Rc4cbrXwNZqnlV8lfIGvX//zgKv",
	"cPVRX97gJbssGXbrZO+F6GQE1U4g0GN8AQiPG2ci4eTeUq9QGCg9BfyES4htnLrRuqhvu15RPt+tl6uX",
	"EzhYpdquM7e3k7MyjsXDyjT1QlZOyQpxA0asMNjTl1ZZAMvXkF/6mhewqexu3ukeYl28ohlEhzBUDYWy",
	"cTAfH23mC2B1VXCvivctSIsdM2BtiDZ9A5ewu1BtOv9NMqG7iblmbKMip0bapWPWeNt6GP3F9wFVaOKq",
	"qpDfiolOgS1OG74IfcY3Mqm897CJU0zRSRwdIwTXCUIQ84+Q4BYTdfDuxPqp6blbxoJOvkRllCD7mW/S",
	"Xp587FM8GzRw0/cNYGkldW3Ygju9XfmqQJR8Gkmx2vAVjGjIsdtiYopnx9WBQA6de8mTTi37B9rgvEmi",
	"TI0zN+ckp4D74lgFLzO9iLcwEnnGvBMAi/15gi1KVJOa0EASOlx33EdUvWwMtTQDg5atwhHQ6FIk1mzW",
	"3ISCRVjXKezlSTrA75hMva+ERmzQj4o3Nfb1IHP7+3Rwu/SFNEL1jFAyI75aTih/4TR8jA9PLYeSqAAV",
	"UMKKJk6NA6O0id3tAjk8/rxclkICy1JhWtwYlQuqONUeM34McPrxI8bIBMwmQ0ixcYQ2enwRMPtZxXtT",
	"rm6CpPSJ6TzARl9x9Dekc2goEtqpPKpyIlyMOJDyIAG4j+1rzq9eyCqCYULOmRNzV7x0Ys7f+Fogg0oO",
	"qLb26jb4mIOHY+rsHgs8HSw3mhMdRbeZTawzBaTTCt0ejBdqm1ESXVLjXWwXjt+TweGY0pfamFQz44Fh",
	"C7XFOBY8WigY+QAu43gENKIb/lYY5FfsN3aaEzL7ht2vTaW40CDLeHNewy5j6sSUoUc0mDF2+Soqg3Er",
	"BHrGjramrL/8HrykdtWT4WHenmrztrxTyLtJbf+xLZRcpRH6Da0wTeGK132NJWmn6IZjdGt2RCpkiumd",
	"mBg6aYauIAMl4KUg6yhR2WXKdefuNoAnztvQLTJeYGUQLncPoxgfDSthLLRG9BCS8CXMkxwLkim1HJ+d",
	"rfTSze+NUs0xRRVvKDQ+nuZnnwHGzi6FNjZDD0RyCq7R9wYv1d+7pmldqRtFROU7RZGWDTjsJeyyQpR1",
	"ml/9uD++dMP+3IhEUy9Q3gpJsSELLDebjC3cMzSFn+6d8Cua8Ct+b/OdthtcUzewduzSHeNfZF/0JO8+",
	"cZBgwBRzDFdtlKR7BGSUezqUjpHeRJsTc0+P9llfB5upCLAPho2EDNixM4ogJecSGQz2zkKgm8ipJcJG",
	"1VqHSaEje4BXlSi2PVsoQR29MfMbGTxCjaseFXB1PbADFIjsnqk0Eg2mW86sVfCp7m6nmsjRJMpcdIuO",
	"xQIhHkqYUDV+SKgmb+0QrS6Alz/C7hfXFqcz+zSf3c10mqK1h3iA1q+b5U3SGV3zZErreEJuSHJeVVpd",
	"8TLzBuYx1tTqyrMmNg/26M8s6tJmzIvvzl699uh/ms/yErjOGlVhdFbYrvqXmRVVThvZIKEqtbvzBZ2d",
	"VMlo8ZtyT7FR+noNvrxvpI0O6hC2DodoK3oj9TIdIXTQ5Ox9IzTFPT4SqBoXSWu+Iw9J1yvCr7gog90s",
	"YDsSzYOTm1bMMikVYgB39q5ETrLsXsXNYHend0fLXQdkUjzWngLEG6qxbZiSfRc6hhfvKu9133CsIkhW",
	"kaFwkvUGLQmZKUWetrHKhXHMIcl35hozbDyijDqItRhxxcpaRLBcMzPhottDMhojScxQkXKMdgvl30+p",
	"pfhHDUwUIK37pHFX9jYqlm301vbhcep0h+FYHjBZ6Fvwd9Ex4gqa/RMPkdivYMSeugG6L5src5hoY5HC",
	"cOvWJXEDh3884uBI3OOs9/zhuZmCF9ddj1v83MlQ/jnGoLrXh99aCZdXX8pzZIzk2ynCZEutfoP0PQ+v",
	"x4lUnFAzVGCUy28gJ8Sct9ad9gmYdvTR5R7TbmIrVDdIYYTrceUjtxwWLwwWai5pqekpg06sW5ph4qjS",
	"Y4LfMozHeRCJW/LrBU9VdnRKhsPprHUAd2zpVrHQOdDeNIkNNDqLfMlNW0HZ1xXoNktuWBrmlgoDDTtZ",
	"VWg1A+TaWCeYk/+vNCoBppbXXNKLGK4fbSXf2wAZv1yva6WxGINJm/0LyMWGl2nNociHJt5CrAQ99lAb",
	"iF4T8IDoIR3iIv8iQ5Ou40lzvmQn8+hJE78ahbgSRixKwBaPqcWCG5TkjSGq6eKmB9KuDTZ/MqH5upaF",
	"hsKuDRHWKNYodXi9aZxXC7DXAJKdYLvHz9lX6LYz4goeOir683l2+vg5Gl3pj5PUAeAf69gnTQoUJ3/1",
	"4iTNx+i3JBhOcHuoR8k0c3qta1xw7dlN1HXKXsKWXtYd3ksbLvkK0pEimwM4UV9cTTSk9egiC3pqxlit",
	"dkzY9PhguZNPI9HnTvwRGixXm42wG+/cMWrj+Kl9KoAGDeDo3Rpf5TXgFT6ij7QKLqLeJfLzGk3pfEvN",
	"Gj3ZP/MNdMk6Z5wKZpSijV4ItafZeSjwg2Vvm2q3RBs3lps6qjkYzLBklRbS4sWitsvsDyxfc81zJ/6O",
	"xtDNFt88S5T67ZaclDdD/LPTXYMBfZUmvR5h+6BD+L7sK6lktnESpXjYZntEu3LUmZt22435DveDnqqU",
	"OSjZKLvVHXbjkaS+E+PJPQDvyIrNfG7Ejzee2WfnzFqn2YPXboX+8uaV1zI2Sqeq9rXb3WscGqwWcIWx",
	"e+lFcjDvuBa6nLQKd8H+y3oegsoZqWVhL6cuAt+qxO00lJ9uLOk+Vj1hHRjbpu6DY4OFBzVn3VK/n9/p",
	"F4zPQ+eT+xJwxT/6yH7hJUUihxmMLGJUhjy5nEXzPfJ/c/at2k5d1N4OCQv7T0CaJElqURa/tFmZvSrv",
	"mst8nfRnLVzHX9v3qJrJ0fmULI635lJCmQRHuuCvQWdMaLV/V1PH2Qg5sW2/8DxNtze5FvEumgGpMKAj",
	"r7ClGyCmajfhrQmoLleqYDhOWzitlZ7DBwuistL/qMHYVPIQfqCgLrRbuvsuVTVmIAu8LR6xH+jJ2TWw",
	"TvkbvKU1VQR8jV0yqNdVqXgxx0IOF9+dvWI0KvWhV1WoqvIKLyndWfTsVVGRyWnhweGBlHTqwnQ4+2Op",
	"3ayNxSpVxvJNlUoOdS0uQgPMQI1t+Hh9ialzxF5Gj0dSHqkD4fhhKfTG3bgaaKS7IE+4/1jL8zVeyToi",
	"dZzlp5cDD1xpoif4mqd0mkKJuO8c3r4iOBUEnzPl7s3XwtBLo3AF3XzUJjnbmwRCfmp3erqWkjglqXvs",
	"Kx5wG7IH5ChQI5j5k5j1CH9DhZyq6d+0Ovpb7JUs0NQvtT54e4+yG5snUsIL0jmXSoocyyOljmb/JOkU",
	"H9iESlJ9I2vY4n6HJjZXssB7EybnqTha8j0IQk+4oRE++uoWlbiD/rT49uWaW7YCa7xkg2Ie3inwdkAh",
	"DfjCl/iAbSQnle74FVFCJl3VWePSuCEbYVrMyMXue/ftZ3/tx3jxSyFRwfdk86HpZKnDFxOtuxUIy1YK",
	"jJ9PNzfYvHN9jjBNtoDth6PwwiJVg0G3nJs2+aCHoM6CR9p7gF3bF66trxPU/NyJQKZBz6rKDzr+ikVS",
	"H7BbOUrghGcxC66diLgN/BjaHnbbG0qC56ljNLhCRzRUeA4PGKN50aH3WpBTWomjsAWjEK5kBQMhE2i8",
	"EhLa9z8TB0SePBJwYXC/jvQzueaWVMBJMu0CeIne55RAM9a7Hu4Kql9LyJEE5xjGGF/G9jGKEcHRNGgV",
	"Ny53zbOjjrsjZeIFvnfsCTl8WgK1Kq9EFZhR0HtsIiU4nOAOz9l0D4DhNhjqRNTdak475yYn0ViS6KIu",
	"VmAzXhSpilTf4leGX0NxKdhCXjeFKauK5VgTpVskZshtfqBcSVNv9owVGtxxuOj1lgQ3xC/IhBXGJJTF",
	"Dv9NVWUcXxkfhHHjMMAQceGfu7ih3tyFNNB6HU9nRqyy6ZTAM+Xu5GiHvh2jt/3vldNLteoi8plLQ+yT",
	"cvEapeTbd+7giCsnDEqN0tHSFDbAoDsV3tzDa2OTktuVSniUDWqPorOnedNrvwFi/HWuOR5+I6G3UUEM",
	"TucreQ/HAnDz0Xhxbn3mmuVsrwgazQai6B3K+0Es0pbTsYgdCthxnwe9p2mGAz0bYe8laAgFGyL0Y4gz",
	"ZRUX3jXeCoshZX1E+ri5cN+maxe4Pwkf5z1qsfvxaiwmmxkhVyUw/N5/z+gSfDp786A9zTVEJYUrIf3q",
	"35MleE1UfHL+w+gEHOrLmkFHjbYXvtQ9TdPfyX/8hWLYGEird/8EJtzBog9egxpqu2SeapuwphzypPLI",
	"nVMx/bDTeP2jtuYR8lOljGhLcKdefJoY63aBjzZF9ZuGsEKgyRXkFuuxtw50DXCTak5usOg1wf9fB2nk",
	"7tiEBPryR/tqHg2LrR840AZpSVFqHRWqPppe4eesCZNCoYQVcFcg/YN+3YSDyWHPyyXkVlwdSAP76xpk",
	"lGI0D0YIepg3ygoTTRgtVhG5uYmtRWhfltZefKJqfndGZywJ5BJ2DwzrcEOycvY8nCu3KSCBFEDpkDkW",
	"USYVhkBWU+8ZFqbhDKRCCPuh7tCW4tr/uE82IlMmjRVY0p24baLjniHTj4FMGst1vVH6L0aEjmWKDR8N",
	"GFe2X+IbDaZ5eC8UoIivpOx8WKbv2hewwKS9xlEQSlmACb+FDF0apRSXEL8WhG6Za66L0CJpZwgmjGzP",
	"eTRI7woF7/tIL5uRRRukOUzoSRR+wlDcvFRO/8rG4pm7cZHxK/0Y/UElvzHi0+G1BO2faUNlr1QGMqtC",
	"UOc+PPaRwr8ofxsimNFii4TcaAmUN22NFyw6y7HkCfeRLfEEmYYNd9jpqBLL+Jj7iP2CvocMllB09KA5",
	"peHXw4XmQ3iuMAMixly/ZP60PJwZcxvLipCSHoU1qbIs0pEyNv1XWhV1Tgd0vDEa69Pkokd7REnSKJEP",
	"Zzm4X5ZYAuxVlGd4CbtjUv1Dqf6wlDH2pELRHKK8/t5q36vRKX2/Llc0gdW94PklDTfzWaVUmY3Y+s+H",
	"1WX6e+BS5JdQMHd2hMC2kWdL2FdoYm6cudfrXaimUlUgoXh4xNiZpFDi4NftljfuDS4f2H3jb3HUoqaC",
	"T96mdPRepmMysRSTvqN8C2D2SzUDTvjdcSgCcqB2yXakso3m14lHfI6mXkqHntb+wyotUxEWKS3lwBMW",
	"CS9yeBMhvLARMlas2oh8+IrCQJVY4mtUGU8AP28E+LzzhqDoPdwRagzRMw05JwXOXR64KGsNPnOAns3p",
	"ldOvuF2H5XPNh2qWO7LBYFg/lWTnhi4F4XLi3+zp7wtVZSVcQceR4NMZ6jwHY8QVxO/9UGdWAFR4Ve8f",
	"ICkLecxXPRni555FNtYp1E0KFSIsrRQ7IDFGXn3PiD3MVBZyGF2JouYd+pk7PMUy8RH5GNeJO+TGmyM9",
	"ucHW8M+lZE0xt5Qh06eThCV0/Ns+7dJTkKInWBqYI29UNlS4izIySto0ZW9XRGMSPwxt2oktEz27st/y",
	"EtfYaYN3NblG8KYWdl1/SX9qd+O0B2BChwPoxQa56AmYoAl5dL5whO1PDVGiqYxyQmf6h2x8foKt+IqW",
	"iGS3myZVPKPorO66RAZc86Kxi469y9Q3n2JBHSWxyNjQ7GrQVYa1ymPGcbJbX/Hy85tOsdLSGdLDv3+b",
	"nmhse4uJTKQ0twtze8UnjR3Z2e5vaPkaTb1/BbdGSR+nB+V9Ho2uEDxDKDJ5yUrVvnCHINk1wiSn6ONv",
	"2MKn6FQacmFEL3vxOpRRbkxN+KpA+yzyftvWoXn+ouwd2HgZ1Bf2c1uS1So8MVoM2y36hYXKyM5NcnmK",
	"+wZskaBfSkbFtTIOHBeXHW8plbjuhQEqDffsNY3in27oNR1WAZk6PfIMukOnNjCc5+TTukPbxEHdzm2q",
	"y39I3H11O6d46tPleF13DBUggmAta4aosr89/hvTsMTHahR79AgHePRo7pv+7Un3s9vOjx6ln1/+XEEC",
	"RCMPw4+b4phfxsLGKTR6JEOhtx61KItDjNHJN2mfe8KMil99xtkXeXDqV/LlDLeqf/TjJuFJ/UVAwiTm",
	"2hk8GirKJJmQROK7JVJG0CqS11rYHRbCCaZ/8WsynOGHxlvovc1N6QR/9ll1CU0ppda3WJtwuv6geInn",
	"kdOpMTjM4tO63235pirBb5Q/Plj8Bzz9w7Pi5Onj/1j84eTrkxyeff385IQ/f8YfP3/6GJ784etnJ/B4",
	"+c3zxZPiybMni2dPnn3z9fP86bPHi2ffPP+PB04OOZQJ0VlIu579b3yVLTt7fZ5dOGRbmvBKNC9qOzYO",
	"T8vwHHcibLgoZ6fhp/8ZdthRrjYt+PDrzGd1ztbWVub0+Pj6+voo7nK8QmdCZlWdr4/DOMOXjF+fN5k5",
	"dLXEFaWki2AyCKxwht/efPf2gp29Pj+KXso8nZ0cnRw9xocUK5C8ErPT2VP8CXfPGtf92DPb7PTjp/ns",
	"eA28RN+7+2MDVos8fDLXfLUCfeTf2HE/XT05DqrE8UfvSPm079txXK76+GPH31Qc6InlbI8/hiot+1t3",
	"yqB4P1vUYSIW+5odLzD5c2pTMFHj8angBcMcf0QVefT3Y58Rl/6IVxXaA8fBKZtu2aHSR7t1uPZ6+Kf6",
	"jz/if5AnI7Qo/nSILmwr0MIpWeR+XlHJqIaFz4vZ6ey7qNGLNeSXWCCZjAzIm09OThJB8VEvRluFL0oo",
	"HJ8/O3k2oYNUNu7kS3kMO/5FXkp1LRmGUJLcrDcbrneoj9haS8P+/CMTSwb9IYQJI+Be5SuDplqsxjqb",
	"zzrk+fDJE43S647pBdCWluHnncyTPw6p33+JIvXz8cduJdQOF5p1bQt1HfXFmwtdu4fjNW8DdP4+vubC",
	"Ol3EhyNgpZphZwu8PPaJNr1f29jWwRcM2I1+7L5Xn/j1uCkElvzYlxCpr36HjDQKaZLhc6shxCfu7PRd",
	"dNa++/Dpg/umXWv81B4gp8fH6OJbK2OPZ5/mH3uHS/zxQ8NjIf94VmlxheHMHz79vwAAAP//2+p9+WG0",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
